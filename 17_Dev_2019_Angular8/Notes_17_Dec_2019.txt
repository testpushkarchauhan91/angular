Angular2-8(2,4,5,6,8)
-- Angular is a component based architecure open source framework.
-- Angular is used to create SPA (Single Page Application)
-- Angular 2-8 which help to create desktop, web and mobile application.
-- Library(predefined functions) vs Framework(protocol) vs API vs Architecture vs Technology
jQuery is a predefined library function
Angular 1.x/2-8: Framework
Library: Library provide lot of pre-defined functions which are internally connected to each other.
So developer or programmer has to call those library functions to do specific task.
Library is not a standard
Library do not follow any design pattern

-- <table>,<form>,<html> etc are DOM
-- library is added to improve DOM performance
-- HTML can create static content
-- JS can create dynamic content by reading DOM
-- Loading HTMl file and loading DOM tags hierarchy

To perform operation on DOM
-- OLD way : next-sibling, previous-sibling
-- OLD way : document.getElementById, based on CSS Selector
-- jQuery provide predefined functions which are internally connected to each other and used to read/write DOM
-- $("selector").dotask()

-- Architecture: Architecture always recommend that divide our component or code based uon their functionality
-- Application must be loosely coupled and divided into modules.
Eg: 
1. Client Server Architecure
2. RMI Architecture
3. EJB Architecture
4. MVC Architecture

-- Framework: Framework contain set of predefined API (classes, interfaces or functions) which are connected internally to each other to perform specific task
-- Framework is also known as protocol or temlate but not final product
-- Framework internally follow standard rules
-- Implementaion of Design Pattern is taken care by Framework
-- Framework will call the code(inject the resources using dependency injection) into our application
-- When we develop any application using framework 70-80% task is taken care by framework
  So developer or programmer has to write hardly 20-30 code to make final product
-- Dot Net is a Framework but Java is a technology

MVC Java
Model 		--> Busines Logic/DAO
View  		--> Servlet or RestController
Controller 	--> HTML/JSP

-- To improve coding we use Angular 1.x
-- Angular 1.x: It is a MVC based framework
-- If we use HTML/JSP it is tightly coupled to backend API
-- But if we use Angular it is loosely coupled
-- Angular 1.x based on JS. No need for transpiler

Angular 2-8
==========================================================================================================================================================================================================
-- Angular 2 to 8 : Controller is replaced by Component. It is component based architecture
-- View side Model View and Component.MVC
-- OLD : MVV(Model View ViewModel)
***-- One Component will replace another component based on the event
-- Facebook introduced new Library ReactJS
-- Angular is a Framework
-- Vue JS is a Framework


TypeScript/HTML/CSS
-- Angular is a part of Google
-- Angular CLI(Command Line Interface)
==========================================================================================================================================================================================================
C:\Users\training\Visual_Studio_Code_Workspace\TypeScript_Practise\Classes>npm i
nstall -g @angular/cli
C:\Users\training\AppData\Roaming\npm\ng -> C:\Users\training\AppData\Roaming\np
m\node_modules\@angular\cli\bin\ng

> @angular/cli@8.3.20 postinstall C:\Users\training\AppData\Roaming\npm\node_mod
ules\@angular\cli
> node ./bin/postinstall/script.js

? Would you like to share anonymous usage data with the Angular Team at Google u

? Would you like to share anonymous usage data with the Angular Team at Google u

? Would you like to share anonymous usage data with the Angular Team at Google u

nder
Google's Privacy Policy at https://policies.google.com/privacy? For more details

 and
how to change this setting, see http://angular.io/analytics. Yes

Thank you for sharing anonymous usage data. If you change your mind, the followi
ng
command will disable this feature entirely:

    ng analytics off

+ @angular/cli@8.3.20
added 129 packages from 66 contributors and updated 122 packages in 160.667s

C:\Users\training\Visual_Studio_Code_Workspace\TypeScript_Practise\Classes>

==========================================================================================================================================================================================================

C:\Users\training\Visual_Studio_Code_Workspace\TypeScript_Practise\Classes>npm i
nstall -g @angular/cli
C:\Users\training\AppData\Roaming\npm\ng -> C:\Users\training\AppData\Roaming\np
m\node_modules\@angular\cli\bin\ng

> @angular/cli@8.3.20 postinstall C:\Users\training\AppData\Roaming\npm\node_mod
ules\@angular\cli
> node ./bin/postinstall/script.js

? Would you like to share anonymous usage data with the Angular Team at Google u

? Would you like to share anonymous usage data with the Angular Team at Google u

? Would you like to share anonymous usage data with the Angular Team at Google u

nder
Google's Privacy Policy at https://policies.google.com/privacy? For more details

 and
how to change this setting, see http://angular.io/analytics. Yes

Thank you for sharing anonymous usage data. If you change your mind, the followi
ng
command will disable this feature entirely:

    ng analytics off

+ @angular/cli@8.3.20
added 129 packages from 66 contributors and updated 122 packages in 160.667s

C:\Users\training\Visual_Studio_Code_Workspace\TypeScript_Practise\Classes>cd ..
/..

C:\Users\training\Visual_Studio_Code_Workspace>mkdir AngularDemo

C:\Users\training\Visual_Studio_Code_Workspace>cd AngularDemo

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo>dir
 Volume in drive C is WINDOWS
 Volume Serial Number is F2D0-CC19

 Directory of C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo

12/17/2019  10:27 AM    <DIR>          .
12/17/2019  10:27 AM    <DIR>          ..
               0 File(s)              0 bytes
               2 Dir(s)  87,401,410,560 bytes free

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo>ng new demo-app
? Would you like to add Angular routing? Yes
? Which stylesheet format would you like to use? CSS

CREATE demo-app/angular.json (3609 bytes)
CREATE demo-app/package.json (1294 bytes)
CREATE demo-app/README.md (1025 bytes)
CREATE demo-app/tsconfig.json (543 bytes)
CREATE demo-app/tslint.json (1953 bytes)
CREATE demo-app/.editorconfig (246 bytes)
CREATE demo-app/.gitignore (631 bytes)
CREATE demo-app/browserslist (429 bytes)
CREATE demo-app/karma.conf.js (1020 bytes)
CREATE demo-app/tsconfig.app.json (270 bytes)
CREATE demo-app/tsconfig.spec.json (270 bytes)
CREATE demo-app/src/favicon.ico (948 bytes)
CREATE demo-app/src/index.html (293 bytes)
CREATE demo-app/src/main.ts (372 bytes)
CREATE demo-app/src/polyfills.ts (2838 bytes)
CREATE demo-app/src/styles.css (80 bytes)
CREATE demo-app/src/test.ts (642 bytes)
CREATE demo-app/src/assets/.gitkeep (0 bytes)
CREATE demo-app/src/environments/environment.prod.ts (51 bytes)
CREATE demo-app/src/environments/environment.ts (662 bytes)
CREATE demo-app/src/app/app-routing.module.ts (246 bytes)
CREATE demo-app/src/app/app.module.ts (393 bytes)
CREATE demo-app/src/app/app.component.html (25530 bytes)
CREATE demo-app/src/app/app.component.spec.ts (1104 bytes)
CREATE demo-app/src/app/app.component.ts (212 bytes)
CREATE demo-app/src/app/app.component.css (0 bytes)
CREATE demo-app/e2e/protractor.conf.js (808 bytes)
CREATE demo-app/e2e/tsconfig.json (214 bytes)
CREATE demo-app/e2e/src/app.e2e-spec.ts (641 bytes)
CREATE demo-app/e2e/src/app.po.ts (262 bytes)
npm WARN deprecated core-js@2.6.11: core-js@<3 is no longer maintained and not r
ecommended for usage due to the number of issues. Please, upgrade your dependenc
ies to the actual version of core-js@3.

> core-js@2.6.11 postinstall C:\Users\training\Visual_Studio_Code_Workspace\Angu
larDemo\demo-app\node_modules\babel-runtime\node_modules\core-js
> node -e "try{require('./postinstall')}catch(e){}"


> core-js@3.2.1 postinstall C:\Users\training\Visual_Studio_Code_Workspace\Angul
arDemo\demo-app\node_modules\core-js
> node scripts/postinstall || echo "ignore"


> core-js-pure@3.5.0 postinstall C:\Users\training\Visual_Studio_Code_Workspace\
AngularDemo\demo-app\node_modules\core-js-pure
> node -e "try{require('./postinstall')}catch(e){}"


> core-js@2.6.11 postinstall C:\Users\training\Visual_Studio_Code_Workspace\Angu
larDemo\demo-app\node_modules\karma\node_modules\core-js
> node -e "try{require('./postinstall')}catch(e){}"


> @angular/cli@8.3.20 postinstall C:\Users\training\Visual_Studio_Code_Workspace
\AngularDemo\demo-app\node_modules\@angular\cli
> node ./bin/postinstall/script.js

npm WARN axobject-query@2.1.1 requires a peer of eslint@^5 || ^6 but none is ins
talled. You must install peer dependencies yourself.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\we
bpack-dev-server\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@
1.2.11: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"
})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\wa
tchpack\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@
1.2.11: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"
})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\@a
ngular\compiler-cli\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@
1.2.11: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"
})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\ka
rma\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@
1.2.11: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"
})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\fse
vents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@
2.1.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"}
)

added 1195 packages from 1052 contributors and audited 18944 packages in 291.953
s
found 3 moderate severity vulnerabilities
  run `npm audit fix` to fix them, or `npm audit` for details
'git' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo>


C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo>cd demo-app

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo\demo-app>ng serve
10% building 3/3 modules 0 activei ?wds?: Project is running at http://localhost
:4200/webpack-dev-server/
i ?wds?: webpack output is served from /
i ?wds?: 404s will fallback to //index.html

chunk {main} main.js, main.js.map (main) 49.5 kB [initial] [rendered]
chunk {polyfills} polyfills.js, polyfills.js.map (polyfills) 264 kB [initial] [r
endered]
chunk {runtime} runtime.js, runtime.js.map (runtime) 6.15 kB [entry] [rendered]
chunk {styles} styles.js, styles.js.map (styles) 9.74 kB [initial] [rendered]
chunk {vendor} vendor.js, vendor.js.map (vendor) 4.08 MB [initial] [rendered]
Date: 2019-12-17T05:09:59.799Z - Hash: 5b20eef6126be2bb1b62 - Time: 25101ms
** Angular Live Development Server is listening on localhost:4200, open your bro
wser on http://localhost:4200/ **
i ?wdm?: Compiled successfully.




==========================================================================================================================================================================================================

ng : next generation
-- Next Generation for HTML : Angular
==========================================================================================================================================================================================================
1. Directive 
You are writing your own tags whose logic you are providing
2. Angular Routing
Based on path move from one component to another

npm install -g @angular/cli
ng new my-dream-app
cd my-dream-app
ng serve or npm start
open the project in VSC

==========================================================================================================================================================================================================
Angular Flow
1.e2e
-- End to End Testing
-- UI Side Fr: Jasmine
-- Run that Framework there is a plugin : Karma
-- End to End Functional Testing that is taken care by e2e
2. node_modules
-- All API Dependency for Angular Project will be used inside node_modules
3. src
-- For Developer
3.1 app
3.1.1 app.component.html
-- contains standard documentation of project
-- This HTML page (app.component.html) is called Template and not simple HTML.
Eg:
<div>
  <h1>Welcome to Angular 8</h1>
</div>

3.1.2 app.component.ts
Eg:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'demo-app';
}

-- title is an variable
-- This class will be used in another file
-- We are using a decorator "@Component"
-- @Component Decorator rules are written in @angular/core
-- Decorator contains set of property
-- We are giving unique name for class
-- selector is a user defined tag-name
-- every component must have different name
-- every component must connect to another component i.e. app.component using @Component Decorator
-- styleUrls are linked to app.component.css


3.1.3 app.component.css
-- For implementing CSS on tags inside app.component.html

3.1.4 app.module.ts
-- Module is a collection of component/package/namespace
-- If there is a decorator @NgModule it is a module
-- Rules are written in @angular/core
-- NgModule has property
-- Template is always linked to component or every component linked to Template
-- component must be part of modules
-- Template <--> Component (part of)--> {Module}
-- component must be declared inside module
-- every component work independently (Eg of Component : banner, login, navigation bar)
-- every component belongs to one module
-- main module (multiple module), one component
-- @NgModule is a type of decorator

app.module.ts
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})

1. decalarations 														(For Component)
2. imports (angular ionic, react native) : inbuild browserModule (predefined module because we are browsing on browser) 	(For Module)
3. providers (hold info about angular service)											(For Angular Service)
4. bootstrap (which is my first component at runtime)										(First Component or Template i.e. AppComponent)

ts -> 

3.1.5
3.1.6
3.2 
4. Configuration Details
4.1 main.ts
-- main.ts will give information about main module (AppModule)

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

4.2 index.html
-- user defined tag <app-root></app-root>
-- selector name in angular which is same as selector: 'app-root' in app.compnent.ts

4.3 angular.json
-- tells us main page which is index.html
-- give 

4.4 package.json
-- which version we are using now




Testing:
http://localhost:4200/
**** ng serve should be running





-- This HTML page (app.component.html) is called Template and not simple HTML.
==========================================================================================================================================================================================================

==========================================================================================================================================================================================================
1. create a new file header.component.ts
-- if class has some variables like msg:string = "Header Info";
-- if class is a special class angular will create object
-- otherwise, create a new object

1.1 ****-- make the class as a component using decorator "header.component.ts" or template


import { Component } from '@angular/core';
@Component({
	selector: 'header-tag',
	templateUrl: './header.component.html',
})
export class HeaderComponent {
	msg: string = "Header Info";
}

1.2 "header.component.html"

<div>
  <h1>Header Component {{msg}}</h1>
</div>

1.3 to majke component part of module
app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './header.component';**********************************************************

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent**********************************************************
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

1.4 bootstrap
-- All other Component will be child of "AppComponent" as mentioned in app.module.ts
-- HeaderComponent mus be child of "AppComponent"
-- Inside "AppCompoenent" child component selector as a tag name
Eg: (Selector behave like tag)
<header-tag></header-tag>

AppComponent
^
HeaderComponent

-- if one component uses another selector it will call that component
-- every component is a type of directive

==========================================================================================================================================================================================================
HeaderComponent and FooterComponent is sibling
==========================================================================================================================================================================================================
1. footer.component.ts
2. footer.component.html
3. app.module.ts
==========================================================================================================================================================================================================
https://cli.angular.io/
==========================================================================================================================================================================================================

When you want to develop big application:
To run hit the URL: http://localhost:4200

Commands for developing components
1. ng generate component component-name or ng g c component-name

Command Prompt 1:
C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo\demo-app>ng g c main
CREATE src/app/main/main.component.html (19 bytes)
CREATE src/app/main/main.component.spec.ts (614 bytes)
CREATE src/app/main/main.component.ts (261 bytes)
CREATE src/app/main/main.component.css (0 bytes)
UPDATE src/app/app.module.ts (617 bytes)

Command Prompt 2:
ng serve

-- Command: ng g c main
-- This will create a main folder inside demo.app

Use it like below: (in app.component.html)
 <app-main></app-main>


Main component will maintain only selector
app.component.ts ->

<header-tag>
<footer-tag>

<div>
  <h3>
    <header-tag></header-tag>
    <header-tag></header-tag>
    <header-tag></header-tag>
  </h3>
  <!-- Code from app.component.html is passed to main.component.html -->
  <h1>
    <footer-tag></footer-tag>
  </h1>
</div>


 ==> main.component.ts
==========================================================================================================================================================================================================
Data Binding
==========================================================================================================================================================================================================
C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo\demo-app>ng g c data-binding
CREATE src/app/data-inding/data-inding.component.html (26 bytes)
CREATE src/app/data-inding/data-inding.component.spec.ts (657 bytes)
CREATE src/app/data-inding/data-inding.component.ts (288 bytes)
CREATE src/app/data-inding/data-inding.component.css (0 bytes)
UPDATE src/app/app.module.ts (717 bytes)

Components:
1. header
2. footer
3. data binding
4. main

Data=Binding
Data Binding providing bridge between template and component or it is used to share data between to view and vice-versa

2 Types:
1. One Way Data Binding (Component to View/Template)
2. Two Way Data Binding

1. One Way Binding
1.1 String Interpolation
Component --> View(Template)
Syntax of String Interpolution: {{variableName}}
1.2 Property Binding
Component --> View (Template)
[propertyName]="variableName"
1.3 Event Binding
View --> Component

2. Two Way Data Binding
In Angular we use ng-model attribute to achieve two way data binding
i.e.
Component to View(HTML) and View(HTML) to Component
2.1 Any Change in Component will change in view and vice versa (Using ngModel)
Syntax:
[(ngModel)]="VariableName"
[()] ====> is called banana bracket
***** ngModel is a pre-defined attribute part of FormsModule.
So we have to import FormsModule in app.modules.ts file

1. Add in app.modules.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './header.component';
import { FooterComponent } from './footer.component';
import { MainComponent } from './main/main.component';
import { DataBindingComponent } from './data-binding/data-binding.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    FooterComponent,
    MainComponent,
    DataBindingComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

2. Template Reference (similar to id concept)
-- View to View 
-- If we do not want to send value to any component
-- View <----> View
Syntax:
<input type="text" #nameRef (keyUp)="0">
{{nameRef.value}}
**** you need to fire some event to trigger in case of String Interpolation like on key up
**** This is only view to view
-- this looks like 2 way binding
=========================================================================================================================================================================================================
1. Directive (Angular 2 to 8)

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo\demo-app>ng g c directive-demo
CREATE src/app/directive-demo/directive-demo.component.html (29 bytes)
CREATE src/app/directive-demo/directive-demo.component.spec.ts (678 bytes)
CREATE src/app/directive-demo/directive-demo.component.ts (300 bytes)
CREATE src/app/directive-demo/directive-demo.component.css (0 bytes)
UPDATE src/app/app.module.ts (896 bytes)

C:\Users\training\Visual_Studio_Code_Workspace\AngularDemo\demo-app>

-- Directive is used to create custom tags which help to add extra functionality to DOM or View.
-- Types of Directives in Angular:
1. Component Directive (Eg: @Component)
-- Component Directive is used to control the view or part of view in HTML
Syntax:
@Component({
  selector: 'tag-name',
  templateUrl: './directive-demo.component.html',
  styleUrls: ['./directive-demo.component.css']
})
export class Demo{

}

2. Structure Directive
 Structure Directive is used to add or remove DOM elements (pre-defined tags or user-defined tags)
Types of Structure Directives
2.1  *ngIf
2.2  *ngFor
3. Attribute Directive
===========================================================================================================================================================================================================
Way 1: Using Directive
directive-demo.component.html

<div>
	<h2>Directive Demo Using Structure Directive</h2>
	<!-- <div *ngIf="false"> -->
	<input type="button" value="Click here" (click)="changeValue()">
	<br>
	<div *ngIf="flag">
		<h2>Welcome to Structure Directive</h2>
	</div>
</div>



===========================================================================================================================================================================================================
directive-demo.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-directive-demo',
  templateUrl: './directive-demo.component.html',
  styleUrls: ['./directive-demo.component.css']
})
export class DirectiveDemoComponent implements OnInit {

  flag: boolean = true;
  constructor() { }

  ngOnInit() {
  }

  changeValue() {
    this.flag = false;
  }
}

===========================================================================================================================================================================================================
Way 2:
directive-demo.component.html

<div>
	<h2>Directive Demo Using Structure Directive</h2>
	<!-- <div *ngIf="false"> -->
	<input type="button" 
		[value]="btn"
		(click)="changeValue()">
	<br>
	<div *ngIf="flag">
		<h2>Welcome to Structure Directive</h2>
	</div>
</div>


===========================================================================================================================================================================================================
directive-demo.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-directive-demo',
  templateUrl: './directive-demo.component.html',
  styleUrls: ['./directive-demo.component.css']
})
export class DirectiveDemoComponent implements OnInit {

  flag: boolean = false;
  btn:string = "show";
  constructor() { }

  ngOnInit() {
  }

  changeValue() {
    if(this.btn=="show"){
      this.btn="hide"
      this.flag=true;
    }else{
      this.btn="show"
      this.flag=false;
    }
  }
}
===========================================================================================================================================================================================================
directive-demo.component.html
<div>
	<h2>Directive Demo Using Structure Directive</h2>
	<!-- <div *ngIf="false"> -->
	<input type="button" 
		[value]="btn"
		(click)="changeValue()">
	<br>
	<div *ngIf="flag">
		<h2>Welcome to Structure Directive</h2>
		<h2>
			<ul>
				<li *ngFor="let std of stdInfo">{{std}}</li>
			</ul>
		</h2>
	</div>
</div>


directive-demo.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-directive-demo',
  templateUrl: './directive-demo.component.html',
  styleUrls: ['./directive-demo.component.css']
})
export class DirectiveDemoComponent implements OnInit {

  flag: boolean = false;
  btn:string = "show";
  stdInfo:string[] = ["A","B","C","D","E"];
  constructor() { }

  ngOnInit() {
  }

  changeValue() {
    if(this.btn=="show"){
      this.btn="hide"
      this.flag=true;
    }else{
      this.btn="show"
      this.flag=false;
    }
  }
}


===========================================================================================================================================================================================================
1. Create Class employee.ts
export class Employee {
	constructor(public empId: number,
		public empName: string,
		public empSalary: number,
		public empAge: number) { }
}
2. import code using:
import { Employee } from '../employee';
3. Create an array using generics
employees:Array<Employee>;
===========================================================================================================================================================================================================
3. Attribute Directive
-- Attribute Directive is used to apply styling to template ngStyle and ngClass
-- 
===========================================================================================================================================================================================================